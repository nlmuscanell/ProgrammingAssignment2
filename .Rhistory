makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinv()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- inv(data, ...)
x$setinv(i)
m
}
## Define a test matrix
A <- matrix( c(5, 1, 0,
3,-1, 2,
4, 0,-1), nrow=3, byrow=TRUE)
det(A)
cacheSolve(A)
makeCacheMatrix(A)
cacheSolve(A)
x <- matrix( c(5, 1, 0,
3,-1, 2,
4, 0,-1), nrow=3, byrow=TRUE)
det(x)
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinv()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- inv(data, ...)
x$setinv(i)
m
}
x <- matrix( c(5, 1, 0,
3,-1, 2,
4, 0,-1), nrow=3, byrow=TRUE)
det(x)
makeCacheMatrix(x)
cacheSolve(x)
test <- c(5, 1, 0, 3,-1, 2,4, 0,-1)
makeCacheMatrix(test)
cacheSolve(test)
cacheSolve()
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinv()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- inv(data, ...)
x$setinv(i)
i
}
test <- c(5, 1, 0, 3,-1, 2,4, 0,-1)
makeCacheMatrix(test)
cacheSolve(test)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() {i}
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
test <- makeCacheMatrix(matrix(1:4, nrow=2, ncol=2))
cacheSolve(test)
test2 <- makeCacheMatrix(matrix(1:6, nrow=3, ncol=3))
cacheSolve(test2)
test2 <- makeCacheMatrix(matrix(1:9, nrow=3, ncol=3))
cacheSolve(test2)
test1 <- makeCacheMatrix(matrix(1:4, nrow=2, ncol=2))
test2 <- makeCacheMatrix(matrix(1:9, nrow=3, ncol=3))
cacheSolve(test1)
cacheSolve(test2)
test1 <- makeCacheMatrix(matrix(1:4, nrow=2, ncol=2))
test2 <- makeCacheMatrix(matrix(1:9, nrow=3, ncol=2))
cacheSolve(test2)
test2 <- makeCacheMatrix(matrix(1:16, nrow=4, ncol=4))
cacheSolve(test2)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- inverse(data, ...)
x$setinverse(i)
i
}
test1 <- makeCacheMatrix(matrix(1:4, nrow=2, ncol=2))
test2 <- makeCacheMatrix(matrix(1:16, nrow=4, ncol=4))
cacheSolve(test1)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
test1 <- makeCacheMatrix(matrix(1:4, nrow=2, ncol=2))
test2 <- makeCacheMatrix(matrix(1:16, nrow=4, ncol=4))
cacheSolve(test1)
cacheSolve(test2)
test2 <- makeCacheMatrix(matrix(5:13, nrow=3, ncol=3))
cacheSolve(test2)
test1 <- makeCacheMatrix(matrix(1:4, nrow=2, ncol=2))
test2 <- makeCacheMatrix(matrix(1, nrow=3, ncol=3))
cacheSolve(test2)
test1 <- makeCacheMatrix(matrix(1:4, nrow=2, ncol=2))
test2 <- makeCacheMatrix(matrix(1:8, nrow=2, ncol=4))
cacheSolve(test2)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() {i}
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
test2 <- makeCacheMatrix(matrix(1:8, nrow=2, ncol=4))
cacheSolve(test2)
test2 <- makeCacheMatrix(matrix(1, nrow=2, ncol=2))
cacheSolve(test2)
test1 <- makeCacheMatrix(matrix(100:104, nrow=2, ncol=2))
cacheSolve(test1)
test <- makeCacheMatrix(matrix(4:8, nrow=2, ncol=2))
cacheSolve(test)
test <- makeCacheMatrix(matrix(1:4, nrow=2, ncol=2))
cacheSolve(test)
